vunit factor_vect_inst(factor_vect(synthesis))
{
   -- set all declarations to run on clk_i
   default clock is rising_edge(clk_i);

   -- Additional signals used during formal verification
   signal f_data  : std_logic_vector(G_DATA_SIZE - 1 downto 0);
   signal f_valid : std_logic;

   -- Process inputs
   input_proc : process (clk_i)
   begin
      if rising_edge(clk_i) then
         if s_valid_i then
            f_data  <= s_data_i;
            f_valid <= '1';
         end if;

         if rst_i then
            f_valid <= '0';
         end if;
      end if;
   end process input_proc;


   --------------------------------------------
   -- ASSERTIONS ABOUT OUTPUTS
   --------------------------------------------

   -- Output must be empty after reset
   f_after_reset : assert always {rst_i} |=> {not m_valid_o};

   -- Output must be stable until accepted
   f_output_stable : assert always {m_valid_o and not m_ready_i and not rst_i} |=>
      {stable(m_valid_o) and stable(m_square_o) and stable(m_complete_o) and stable(m_primes_o)};

--   -- Verify correct output
--   f_output : assert always {m_valid_o and not rst_i and f_valid} |->
--      {to_integer(m_res_o) = f_res};

   --------------------------------------------
   -- ASSUMPTIONS ABOUT INPUTS
   --------------------------------------------

   -- Require reset at startup.
   f_reset : assume {rst_i};

   f_nonzero : assume always {s_data_i /= 0};


   --------------------------------------------
   -- COVER STATEMENTS TO VERIFY REACHABILITY
   --------------------------------------------

   f_full_to_empty : cover {m_valid_o and not rst_i;
                            not m_valid_o};

} -- vunit factor_vect_inst(factor_vect(synthesis))

