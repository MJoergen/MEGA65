vunit divexp_inst(divexp(synthesis))
{
   -- set all declarations to run on clk_i
   default clock is rising_edge(clk_i);

   type     divexp_res_type is record
      quot   : natural;
      square : natural;
      exp    : natural;
   end record divexp_res_type;

   -- Additional signals used during formal verification
   signal f_val_n : std_logic_vector(G_DATA_SIZE - 1 downto 0);
   signal f_val_d : std_logic_vector(G_DATA_SIZE - 1 downto 0);
   signal f_res   : divexp_res_type;
   signal f_valid : std_logic;

   pure function to_integer(arg : std_logic) return integer is
   begin
      if arg = '1' then
         return 1;
      else
         return 0;
      end if;
   end function to_integer;

   -- Process inputs
   input_proc : process (clk_i)

      pure function calc_divexp (
         n : natural;
         d : natural
      ) return divexp_res_type is
         variable res_v : divexp_res_type;
      begin
         assert n > 1;
         assert d > 1;
         res_v.quot   := n;
         res_v.square := 1;
         res_v.exp    := 0;

         for i in 1 to G_DATA_SIZE loop
            if res_v.quot mod d /= 0 then
               exit;
            end if;
            res_v.quot := res_v.quot / d;
            if res_v.exp = 1 then
               res_v.square := res_v.square * d;
            end if;
            res_v.exp := 1 - res_v.exp;
         end loop;

         return res_v;
      end function calc_divexp;

   begin
      if rising_edge(clk_i) then
         if s_valid_i and s_ready_o then
            f_val_n <= s_val_n_i;
            f_val_d <= s_val_d_i;
            f_res   <= calc_divexp(to_integer(s_val_n_i), to_integer(s_val_d_i));
            f_valid <= '1';
         end if;

         if rst_i then
            f_valid <= '0';
         end if;
      end if;
   end process input_proc;


   --------------------------------------------
   -- ASSERTIONS ABOUT OUTPUTS
   --------------------------------------------

   -- Output must be empty after reset
   f_after_reset : assert always {rst_i} |=> {not m_valid_o};

   -- Output must be stable until accepted
   f_output_stable : assert always {m_valid_o and not m_ready_i and not rst_i} |=>
      {stable(m_valid_o) and stable(m_quot_o) and stable(m_square_o) and stable(m_exp_o)};

   -- Verify correct output
   f_output : assert always {m_valid_o and not rst_i and f_valid} |->
      {to_integer(m_quot_o)   = f_res.quot and
       to_integer(m_square_o) = f_res.square and
       to_integer(m_exp_o)    = f_res.exp};

   --------------------------------------------
   -- ASSUMPTIONS ABOUT INPUTS
   --------------------------------------------

   -- Require reset at startup.
   f_reset : assume {rst_i};

   f_n_greater_one : assume always {s_val_n_i > 1};
   f_d_greater_one : assume always {s_val_d_i > 1};

   f_input_stable : assume always {s_valid_i and not s_ready_o and not rst_i} |=>
      {stable(s_valid_i) and stable(s_val_n_i) and stable(s_val_d_i)};


   --------------------------------------------
   -- COVER STATEMENTS TO VERIFY REACHABILITY
   --------------------------------------------

   f_full_to_empty : cover {m_valid_o and not rst_i;
                            not m_valid_o};

} -- vunit divexp_inst(divexp(synthesis))

